from read_config import read_config
from cse_190_assi_3.msg import *
from copy import deepcopy
import heapq, rospy

class PriorityQueue():
	def __init__(self):
		self._queue = []
		self._index = 0

	def push(self,info):
		heapq.heappush(self._queue, (info[0],self._index,info))
		self._index += 1

	def pop(self):
		return heapq.heappop(self._queue)

	def empty(self):
		return not len(self._queue)

class AStar():
	BLANK, GOAL, START, OBSTACLE, PIT = range(5)

	def __init__(self):
		self.json_data = read_config()
		self.cost = 1
		self.avoid_states = [AStar.OBSTACLE, AStar.PIT]
		self.create_pub()
		self.create_map()
		self.astar()

	def astar(self):
		queue = PriorityQueue()
		path_list = []
		path_list.append(self.start)
		queue.push((self.cost + self.manhattan_dist(self.start), self.start, path_list))
		
		while not queue.empty():
			curr_pos_tup = queue.pop()
			curr_fx, curr_state, curr_path = curr_pos_tup[2]
			
			if self.isGoal(curr_state):
				msg = AStarPath()
				#msg.data = curr_path.reshape(len(curr_path)*2)
				msg.data = [1,2]
				rospy.sleep(0.5)
				self.pathlist_pub.publish(msg)
				msg.data = [3,4]
				rospy.sleep(0.5)
				self.pathlist_pub.publish(msg)
				rospy.sleep(0.5)
				#for path in curr_path:
					#self.pathlist_pub.publish(path)
				break
			
			for child in self.getChildren(curr_state):
				cost = curr_fx - self.manhattan_dist(curr_state)
				new_fx = self.manhattan_dist(child) + (self.cost + cost)
				queue.push((new_fx, child, curr_path + [child]))
		

	def getChildren(self,curr_state):
		children = []
		curr_row, curr_col = curr_state
		map_states = map(lambda l: [curr_row+l[0],curr_col+l[1]],self.move_list)

		for state in map_states:
			row, col = state
			if row >= 0 and row < len(self.map) and col >= 0 and \
				col < len(self.map[0]) and self.map[row][col] not in self.avoid_states:
					children.append(state)

		return children
			
	def isGoal(self,state):
		return state == self.goal

	def create_map(self):
		map_size = self.json_data["map_size"]
		self.map = [[AStar.BLANK for c in range(map_size[1])] for r in range(map_size[0])]
		self.start = self.json_data["start"]
		self.move_list = self.json_data["move_list"]
		self.goal = self.json_data["goal"]
		self.map[self.goal[0]][self.goal[1]] = AStar.GOAL
		self.map[self.start[0]][self.start[1]] = AStar.START

		for wall_r,wall_c in self.json_data["walls"]:
			self.map[wall_r][wall_c] = AStar.OBSTACLE
		
		for pit_r, pit_c in self.json_data["pits"]:
			self.map[pit_r][pit_c] = AStar.PIT
	
	def create_pub(self):
		self.pathlist_pub = rospy.Publisher("/results/path_list", AStarPath, queue_size=10)

	def manhattan_dist(self,pos):
		return abs(pos[0] - self.goal[0]) + abs(pos[1] - self.goal[1])

if __name__ == '__main__':
	AStar()
